/******************************************************************************
START Lab Basic Page Styles
******************************************************************************/

/* Our default values set as CSS variables */
:root {
  --color-gray: rgb(239, 239, 239);
  --color-text: rgb(74, 74, 74);
  --color-bg: #69f7be;
  --color-text-main: #000000;
  --color-primary: #ffff00;
  --wrapper-height: 87vh;
  --image-max-width: 300px;
  --image-margin: 3rem;
  --font-family: ‘Open Sans’, Verdana, sans-serif;
  --font-weight: 400;
  --line-height: 1.5;
}

/* Basic page style resets */
* {
  box-sizing: border-box;
}
[hidden] {
  display: none !important;
}

/* 
  These rules apply to actual HTML elements with no labelling!
  So: they style the tags directly
*/

html {
  background-color: #faf3e6;
  font-size: 18;
  min-width: 150px;
  overflow-x: hidden;
  overflow-y: scroll;

  /* these are specific to different browsers */
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  text-size-adjust: 100%;
}

body {
  font-family: var(
    --font-family
  ); /*  This is an example of a custom CSS property  */
  margin: 0;
  padding: 20px;
  background-color: #faf3e6;
  color: var(--color-text);
  background-image:url(https://img.ixintu.com/download/jpg/202003/18e5b32a7feceb09ee6666c456b71d7c_610_428.jpg!con);
  background-size:100% 100%;
  background-repeat:no-repeat;
  background-attachment:fixed;
}

a {
  display: inline-block;
  text-decoration: none;
}

h2 {
  margin: 0;
  padding: 0;
  padding-bottom: 1.5rem;
}

form {
  accent-color: hsla(120, 100%, 50%, 0.482);
}

/******************************************************************************
IMPORT DECLARATIONS

these import styles from other sheets, in order
******************************************************************************/

@import url("./mapstyle.css");

/******************************************************************************
CLASS DECLARATIONS

  - These styles use 'class names'
  - You can apply them by using the 'class' attribute on your HTML
  - like this: <div class="wrapper">
  - note that the period vanishes there!
******************************************************************************/

.wrapper {
  min-height: 100%;
  display: flex;
  position:relative;
  padding-bottom:100px;
  flex-direction: column;
  flex-wrap:wrap;
  margin: 0;
  flex: 1;
}

.container {
  margin: 0;
  display: flex;
  flex-wrap:wrap;
  background-color:#FDEBD0;
  opacity:0.88;
  justify-content: center;
  align-items: center;
  flex: 1;
  border-style:dotted;
  border-width:10px;
  border-color:#FADBD8;
  padding: 2px;
}
.label{
  font-size: 1.5rem;
}

.table{
  border: 6px solid pink;
  text-align:space-around;
  width:100%;
  font-size: 1.25rem;
  background-color:#F9EFC1;
  opacity:0.9;
}
.header {
  text-decoration:italic;
}

.button{
  color:#ffffff;
  border-radius:10px;
}

/*
  This rule implies that the H1 tag lives within another HTML tag
  It "inherits" some rules from the above
  Those rules won't apply to an h1 that's outside a block with the class of 'header'
*/

.header h2 {
  display: block;
  /* this will push other blocks out of the way */

  /* colors */
  color: var(--color-text-2);
  border: 4px dashed rgb(99, 99, 99);

  /* shapes */
  border-radius: 6px;
  font-size: 1.5rem;
  padding: 1.25rem;
  margin: 0; /* removing the margin on h1 tags means the header pins to the top */

  /* box-shadows are fancy */
  box-shadow: 0 0.5em 1em -0.125em rgb(10 10 10 / 10%),
    0 0 0 1px rgb(10 10 10 / 2%);
}

/*
  Rules can be combined on a block to apply the 'cascade' in order
  So you can use two classnames in a single class attribute
  like: <div class="box section">

  Rules may combine in unexpected ways - remember that the LAST thing written in this file will have "priority"
  And will be what displays in your client
*/

.box {
  display:flex;
  border: 0;
  border-radius: 4px;
  width: 100%;
  height: 100%;
  padding: 2px;
  margin: 0;
  max-width:100%;
}

.upper_section{
  display:flex;
  flex-direction:row;
  gap: 3px;
  width:100%;
  height:250px;
  line-height:60px;
  justify-content:space-around;
  align-items:center;
}

.lower_section {
  display: flex;
  flex-direction: column;
  flex: 2;
  margin: 1rem;
  max-width:400px;
  align-items: center;
  justify-content: center;
}

/*
  This block is actually dependent on the "container" block having a flex set on it
  and the "wrapper" block displaying as a flex column with a "vertical height" (vh) of 100.
  That serves to cram the footer to the bottom of the page.
*/

.footer {
  border: 0;
  border-radius: 4px;
  flex-shrink: 0;
  padding: 1rem;
  font-size: 1.2rem;
  font-weight: 600;

}

.footer a {
  bottom:0;
  left:0;
  right:0;
  height:100px;
}

/*
  This is an example of a 'pseudoclass'
  In this instance, it says what to do if a mouse hovers over a link
  This is pretty desktop-specific, since there's no hover function on touchscreens
*/
.footer a:hover {
  /* Hue, saturation, luminosity, alpha */
  background-color: hsla(0, 0%, 90%, 0.15);
  /* red, green, blue, alpha */
  text-decoration: none;

}

.subtitle {
  color: rgba(0, 0, 0, 0.8);
  margin: 0px;
  margin-bottom: 5px;
}

/*
Form Styles
*/
form input {
  /* This is a hack to make sure our boxes line up with one another nicely */
  width: 100%;
  width: -moz-available; /* WebKit-based browsers will ignore this. */
  width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */
  width: fill-available;

  /* here we are setting white space correctly */
  margin-bottom: 1rem;
  height: 2rem;
  border-radius: 4px;
}

form label {
  width: 100%;
  width: -moz-available; /* WebKit-based browsers will ignore this. */
  width: -webkit-fill-available; /* Mozilla-based browsers will ignore this. */
  width: fill-available;
  align-items: flex-start;

  display: block; /* this turns the label text into a box we can set margins on */
  margin-bottom: 0.5rem;
}

/* 
  Set some rules for smaller screens
*/

@media only screen and (max-width: 736px) {
}
